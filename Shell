#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>

#define MAX_LINE_LENGTH 512

// Structure to represent a node in the doubly linked list
struct node
{
    int pid;
    char *command;
    struct node *next;
    struct node *prev;
};

// Function to handle I/O redirection
void redirect(char *args[])
{
    // Check for "<" and ">" redirection operators
    int i;
    for (i = 0; args[i] != NULL; i++)
    {
        if (strcmp(args[i], "<") == 0)
        {
            // Redirect input from the specified file
            freopen(args[i + 1], "r", stdin);
            args[i] = NULL;
        }
        else if (strcmp(args[i], ">") == 0)
        {
            // Redirect output to the specified file
            freopen(args[i + 1], "w", stdout);
            args[i] = NULL;
        }
    }
}

int main()
{
    // Create a doubly linked list to manage background processes
    struct node *list = NULL;

    // Loop until the user runs the "exit" command
    while (1)
    {
        // Print the shell prompt
        printf("$ ");

        // Read the command line
        char line[MAX_LINE_LENGTH];
        if (fgets(line, MAX_LINE_LENGTH, stdin) == NULL)
        {
            break;
        }

        // Tokenize the command line
        char *args[MAX_LINE_LENGTH];
        int i = 0;
        char *token = strtok(line, " \t\n");
        while (token != NULL)
        {
            args[i++] = token;
            token = strtok(NULL, " \t\n");
        }
        args[i] = NULL;

        // Check if the user entered the "exit" command
        if (strcmp(args[0], "exit") == 0)
        {
            break;
        }

        // Handle I/O redirection
        redirect(args);

        // Check if the command should be run in the background
        int background = 0;
        if (strcmp(args[i - 1], "&") == 0)
        {
            background = 1;
            args[i - 1] = NULL;
        }

        // Use the fork() function to create a new child process
        pid_t pid = fork();
        if (pid == 0)
        {
            // Use the execvp() function to execute the command in the child process
            execvp(args[0], args);

            // If execvp() returns, it means an error occurred
            fprintf(stderr, "Error: Command not found\n");
            exit(1);
        }
        else if (pid > 0)
        {
            // If the command is run in the background, add it to the doubly linked list
            if (background)
            {
                // Allocate memory for a new list node
                struct node *new_node = (struct node *) malloc(sizeof(struct node));
                new_node->pid = pid;
                new_node->command = strdup(args[0]);
                new_node->next = NULL;
                new_node->prev = NULL;

                // Add the new node to the end of the list
                if (list == NULL)
                {
                    list = new_node;
                }
                else
                {
                    struct node *curr = list;
                    while (curr->next != NULL)
                    {
                        curr = curr->next;
                    }
                    curr->next = new_node;
                    new_node->prev = curr;
                }
            }
            // If the command is not run in the background, wait for it to finish
            else
            {
                waitpid(pid, NULL, 0);
            }
        }
        else
        {
            // If fork() returns a negative value, an error occurred
            fprintf(stderr, "Error: fork() failed\n");
        }

        // Check for completed background processes and remove them from the list
        struct node *curr = list;
        while (curr != NULL)
        {
            struct node *next = curr->next;
            int status;
            pid_t result = waitpid(curr->pid, &status, WNOHANG);
            if (result == curr->pid)
            {
                // Remove the node from the list
                if (curr->prev == NULL)
                {
                    list = curr->next;
                }
                else
                {
                    curr->prev->next = curr->next;
                }
                if (curr->next != NULL)
                {
                    curr->next->prev = curr->prev;
                }
                free(curr->command);
                free(curr);
            }
            curr = next;
        }
    }

    // Free the memory used by the doubly linked list
    while (list != NULL)
    {
        struct node *next = list->next;
        free(list->command);
        free(list);
        list = next;
    }

    return 0;
}
